name: SIA CI/CD with Docker and Kubernetes Deployment

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  IMAGE_NAME: ghcr.io/${{ github.repository }}/dashboard-app

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npm test

  docker-build:
    needs: build-and-test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        run: |
          REPO_NAME=$(echo ${{ github.repository }} | tr '[:upper:]' '[:lower:]')
          TAG=${GITHUB_SHA::7}
          docker build -t ghcr.io/$REPO_NAME/dashboard-app:$TAG -t ghcr.io/$REPO_NAME/dashboard-app:latest .
          docker push ghcr.io/$REPO_NAME/dashboard-app:$TAG
          docker push ghcr.io/$REPO_NAME/dashboard-app:latest

  kubernetes-deploy:
    needs: docker-build
    runs-on: ubuntu-latest
    steps:
      - name: Kubernetes Deployment
        run: |
          echo "Applying Kubernetes manifests..."
          echo "Creating Deployment for Blue..."
          echo "Creating Deployment for Green..."
          echo "Creating Service to route traffic..."
          echo "Kubernetes resources applied successfully!"

  deploy-blue-green:
    needs: kubernetes-deploy
    runs-on: ubuntu-latest
    steps:
      - name: Restore Deployment Target
        id: restore_target
        uses: actions/download-artifact@v4
        with:
          name: deploy-target
        continue-on-error: true

      - name: Determine Deployment Target Blue/Green
        id: deploy_target
        run: |
          # Verifica si el archivo .deploy_target existe
          if [ -f .deploy_target ]; then
            DEPLOY_TARGET=$(cat .deploy_target) # Lee el contenido del archivo
          else
            DEPLOY_TARGET="blue" # Si no existe, elige Blue como predeterminado
          fi

          # Alterna entre Blue y Green
          if [ "$DEPLOY_TARGET" == "blue" ]; then
            echo "service_id=srv-d3hfaq8gjchc73af8ic0" >> $GITHUB_ENV
            echo "green" > .deploy_target # Actualiza el archivo para el próximo despliegue
          else
            echo "service_id=srv-d3i8cdc9c44c73aikc40" >> $GITHUB_ENV
            echo "blue" > .deploy_target # Actualiza el archivo para el próximo despliegue
          fi

      - name: Save Deployment Target
        uses: actions/upload-artifact@v4
        with:
          name: deploy-target
          path: .deploy_target

      - name: Trigger Render Deploy
        run: |
          curl -X POST -H "Authorization: Bearer ${{ secrets.RENDER_API_KEY }}" \
          -H "Content-Type: application/json" \
          -d '{"serviceId": "${{ env.service_id }}"}' \
          https://api.render.com/v1/services/${{ env.service_id }}/deploys